# Parameters
nc: 7  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple
anchors:
  - [42, 35,  53, 49,  70, 54]  # P4/16
  - [63, 67,  83, 69,  81, 88]  # P5/32
  - [109, 88, 108, 115, 153, 131]

# ResNet backbone
backbone:
  # [from, number, module, args]     ->3*1024*1024
  [[-1, 1, Conv, [64, 3, 2]],  # 0   ->64*512*512
  [-1, 1, Conv, [128, 3, 2]], # 1   ->128*256*256
  [-1, 1, Conv, [128, 3, 1]], # 2   ->128*256*256

  # from 0 layer
  [0, 1, Conv, [128, 1, 2, ]], # 3  ->128*256*256
  [[-1, 2], 1, shortcut, []],  # 4   ->128*256*256   
  
  [-1, 1, Conv, [128, 3, 1]], # 5   ->128*256*256
  [-1, 1, Conv, [128, 3, 1]], # 6   ->128*256*256
  [[-1, 4], 1, shortcut, []],  # 7   ->128*256*256   

  [-1, 1, Conv, [256, 3, 2]], # 8   ->256*128*128
  [-1, 1, Conv, [256, 3, 1]], # 9   ->256*128*128
  
  [ 7, 1, Conv, [256, 1, 2]], # 10  ->256*128*128  
  [[-1, 9], 1, shortcut, []],  # 11  ->256*128*128   

  [-1, 1, Conv, [256, 3, 1]], # 12  ->256*128*128 
  [-1, 1, Conv, [256, 3, 1]], # 13  ->256*128*128 
  [[-1, 11], 1, shortcut, []], # 14  ->256*128*128   

  [-1, 1, Conv, [512, 3, 2]], # 15  ->512*64*64 
  [-1, 1, Conv, [512, 3, 1]], # 16  ->512*64*64 

  [ 14, 1, Conv, [512, 1, 2]], # 17 ->512*64*64 
  [[-1, 16], 1, shortcut, []],  # 18 ->512*64*64     

  [-1, 1, Conv, [512, 3, 1]], # 19  ->512*64*64 
  [-1, 1, Conv, [512, 3, 1]], # 20  ->512*64*64   
  [[-1, 18], 1, shortcut, []], # 21  ->512*64*64   

  [14, 1, Conv, [256, 3, 2]], # 22  ->256*64*64  down->up downsample
  [[-1, 21], 1, Concat, [1]], # 23  ->(256+512)*64*64  

  [-1, 1, Conv, [256, 1, 1]], # 24  ->256*64*64 
  [-1, 1, Conv, [512, 3, 1]], # 25  ->512*64*64  
  [-1, 1, Conv, [256, 1, 1]], # 26  ->256*64*64
  [-1, 1, Conv, [512, 3, 1]], # 27  ->512*64*64  
  [-1, 1, Conv, [256, 1, 1]], # 28  ->256*64*64 

  [-1, 1, Conv, [128, 1, 1]], # 29  ->128*64*64
  [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 30  ->128*128*128
  [[-1, 14], 1, Concat, [1]], # 31  ->(128+256)*128*128
  [7, 1, Conv, [128, 3, 2]], # 32  ->128*128*128 
  [[-1, 31], 1, Concat, [1]], # 33  ->(128+128+256)*128*128

  [-1, 1, RepBlock, [128, 4]], # 34 ->128*128*128 

  [-1, 1, Conv, [64, 1, 1]], # 35  ->64*128*128 
  [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 36  ->64*256*256 
  [[-1, 7], 1, Concat, [1]], # 37  ->(64+128)*256*256

  [-1, 1, RepBlock, [64, 4]], # 38 ->64*256*256 

  [-1, 1, Conv, [64, 3, 2]], # 39  ->64*128*128 
  [[-1, 35], 1, Concat, [1]], # 40  ->(64+64)*128*128

  [-1, 1, RepBlock, [128, 4]], # 41 ->128*128*128 

  [-1, 1, Conv, [128, 3, 2]], # 42  ->128*64*64 
  [[-1, 29], 1, Concat, [1]], # 43  ->(128+128)*64*64

  [-1, 1, RepBlock, [256, 4]], # 44 ->256*64*64 


  [38, 1, Conv, [128, 1, 1]], # 45  ->128*256*256
  [41, 1, Conv, [256, 1, 1]], # 46  ->256*128*128
  [44, 1, Conv, [512, 1, 1]], # 47  ->512*64*64
  ]

# head
head:
  [
  [[45, 46, 47], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]